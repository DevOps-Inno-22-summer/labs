apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "app-python-helm.fullname" . }}
  labels:
    {{- include "app-python-helm.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "app-python-helm.fullname" . }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "app-python-helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app-python-helm.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app-python-helm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["uwsgi"]
          args: ["--http", ":8000", "--module", "django_project.wsgi"]
#          env:
#            - name: MY_TOKEN
#              valueFrom:
#                secretKeyRef:
#                  name: credentials
#                  key: token
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /
              port: 8000
          readinessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /
              port: 8000
          resources:
            requests:
              memory: "64Mi"
              cpu: "900m"
            limits:
              memory: "128Mi"
              cpu: "1000m"
          volumeMounts:
            - name: config
              mountPath: "/config"
              readOnly: true
            - name: {{ .Values.statefulSet.name }}
              mountPath: /app_volume/
            - name: workdir
              mountPath: /workdir/
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            name: {{ .Release.Name }}-configmap
            items:
            - key: "config.json"
              path: "config.json"
        - name: workdir
          emptyDir: { }

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: install
          image: busybox:1.28
          command:
            - wget
            - "-O"
            - "/workdir/index.html"
            - http://info.cern.ch
          volumeMounts:
            - name: workdir
              mountPath: "/workdir"
      dnsPolicy: Default
  volumeClaimTemplates:
    - metadata:
        name: {{ .Values.statefulSet.name }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.statefulSet.storageSize }}
